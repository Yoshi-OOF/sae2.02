package sae.solver;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.PriorityQueue;

import sae.graph.GraphSoluce;
import sae.graph.Node;

public class SolverWithAstar implements Solver {
	private Node start;
	private Node end;
	private GraphSoluce soluce;
	private int steps;
	
	public SolverWithAstar(Node start, Node end) {
		super();
		this.start = start;
		this.end = end;
		soluce = new GraphSoluce();
	}
	
	@Override
	public void resolve() {
		List<Node> closedList = new ArrayList<>();
		PriorityQueue<Node> openList = new PriorityQueue<>(Comparator.comparingInt(n -> n.getHeuristic()));
		openList.add(start);
		start.setHeuristic(calculateHeuristic(start));
		
		while (!openList.isEmpty()) {
			Node current = openList.poll();
			if (current.equals(end)) {
				reconstructPath(current);
				break;
			}
			for (Node neighbour : current.neighbors()) {
				if (!closedList.contains(neighbour) || (!openList.contains(neighbour) && neighbour.getCost() < current.getCost())) {
					neighbour.setCost(current.getCost() + 1);
					calculateHeuristic(neighbour);
					openList.add(neighbour);
				}
			}
			closedList.add(current);
		}
		Node current = end;    
        while (current != null) {
            soluce.add(current);
            current = current.getPrevious();
        }
		
	}
	
	private int calculateHeuristic(Node node) {
        return distance(node, end) + node.getCost();
    }

    private int distance(Node a, Node b) {
        // Calculate the distance between two nodes.
    	int x1 = a.getCoords().getX();
    	int y1 = a.getCoords().getY();
    	int x2 = b.getCoords().getX();
    	int y2 = b.getCoords().getY();
    	int dx = Math.abs(x1 - x2);
    	int dy = Math.abs(y1 - y2);
    	return dx + dy;
    }

	private void reconstructPath(Node current) {
		
		
	}

	@Override
	public GraphSoluce getSoluce() {
		return soluce;
	}

	@Override
	public int getSteps() {
		return steps;
	}
}